/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.asset.ext.model.impl;

import com.liferay.asset.ext.model.AssetEntryUserStatus;
import com.liferay.asset.ext.model.AssetEntryUserStatusModel;
import com.liferay.asset.ext.model.AssetEntryUserStatusSoap;
import com.liferay.asset.ext.service.persistence.AssetEntryUserStatusPK;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the AssetEntryUserStatus service. Represents a row in the &quot;ASSET_EXT_AssetEntryUserStatus&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>AssetEntryUserStatusModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AssetEntryUserStatusImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AssetEntryUserStatusImpl
 * @generated
 */
@JSON(strict = true)
public class AssetEntryUserStatusModelImpl
	extends BaseModelImpl<AssetEntryUserStatus>
	implements AssetEntryUserStatusModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a asset entry user status model instance should use the <code>AssetEntryUserStatus</code> interface instead.
	 */
	public static final String TABLE_NAME = "ASSET_EXT_AssetEntryUserStatus";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"assetEntryUserStatusId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"entryId", Types.BIGINT}, {"acknowledged", Types.BOOLEAN},
		{"acknowledgementDate", Types.TIMESTAMP}, {"downloaded", Types.BOOLEAN},
		{"downloadDate", Types.TIMESTAMP}, {"read_", Types.BOOLEAN},
		{"readDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("assetEntryUserStatusId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("entryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("acknowledged", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("acknowledgementDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("downloaded", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("downloadDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("read_", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("readDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table ASSET_EXT_AssetEntryUserStatus (uuid_ VARCHAR(75) null,assetEntryUserStatusId LONG not null,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,entryId LONG not null,acknowledged BOOLEAN,acknowledgementDate DATE null,downloaded BOOLEAN,downloadDate DATE null,read_ BOOLEAN,readDate DATE null,primary key (assetEntryUserStatusId, entryId))";

	public static final String TABLE_SQL_DROP =
		"drop table ASSET_EXT_AssetEntryUserStatus";

	public static final String ORDER_BY_JPQL =
		" ORDER BY assetEntryUserStatus.userName ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY ASSET_EXT_AssetEntryUserStatus.userName ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	public static final long ENTRYID_COLUMN_BITMASK = 2L;

	public static final long GROUPID_COLUMN_BITMASK = 4L;

	public static final long USERID_COLUMN_BITMASK = 8L;

	public static final long UUID_COLUMN_BITMASK = 16L;

	public static final long USERNAME_COLUMN_BITMASK = 32L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static AssetEntryUserStatus toModel(
		AssetEntryUserStatusSoap soapModel) {

		if (soapModel == null) {
			return null;
		}

		AssetEntryUserStatus model = new AssetEntryUserStatusImpl();

		model.setUuid(soapModel.getUuid());
		model.setAssetEntryUserStatusId(soapModel.getAssetEntryUserStatusId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setEntryId(soapModel.getEntryId());
		model.setAcknowledged(soapModel.isAcknowledged());
		model.setAcknowledgementDate(soapModel.getAcknowledgementDate());
		model.setDownloaded(soapModel.isDownloaded());
		model.setDownloadDate(soapModel.getDownloadDate());
		model.setRead(soapModel.isRead());
		model.setReadDate(soapModel.getReadDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<AssetEntryUserStatus> toModels(
		AssetEntryUserStatusSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<AssetEntryUserStatus> models = new ArrayList<AssetEntryUserStatus>(
			soapModels.length);

		for (AssetEntryUserStatusSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public AssetEntryUserStatusModelImpl() {
	}

	@Override
	public AssetEntryUserStatusPK getPrimaryKey() {
		return new AssetEntryUserStatusPK(_assetEntryUserStatusId, _entryId);
	}

	@Override
	public void setPrimaryKey(AssetEntryUserStatusPK primaryKey) {
		setAssetEntryUserStatusId(primaryKey.assetEntryUserStatusId);
		setEntryId(primaryKey.entryId);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new AssetEntryUserStatusPK(_assetEntryUserStatusId, _entryId);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((AssetEntryUserStatusPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return AssetEntryUserStatus.class;
	}

	@Override
	public String getModelClassName() {
		return AssetEntryUserStatus.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<AssetEntryUserStatus, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<AssetEntryUserStatus, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AssetEntryUserStatus, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((AssetEntryUserStatus)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<AssetEntryUserStatus, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<AssetEntryUserStatus, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(AssetEntryUserStatus)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<AssetEntryUserStatus, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<AssetEntryUserStatus, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, AssetEntryUserStatus>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			AssetEntryUserStatus.class.getClassLoader(),
			AssetEntryUserStatus.class, ModelWrapper.class);

		try {
			Constructor<AssetEntryUserStatus> constructor =
				(Constructor<AssetEntryUserStatus>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<AssetEntryUserStatus, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<AssetEntryUserStatus, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<AssetEntryUserStatus, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<AssetEntryUserStatus, Object>>();
		Map<String, BiConsumer<AssetEntryUserStatus, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String, BiConsumer<AssetEntryUserStatus, ?>>();

		attributeGetterFunctions.put("uuid", AssetEntryUserStatus::getUuid);
		attributeSetterBiConsumers.put(
			"uuid",
			(BiConsumer<AssetEntryUserStatus, String>)
				AssetEntryUserStatus::setUuid);
		attributeGetterFunctions.put(
			"assetEntryUserStatusId",
			AssetEntryUserStatus::getAssetEntryUserStatusId);
		attributeSetterBiConsumers.put(
			"assetEntryUserStatusId",
			(BiConsumer<AssetEntryUserStatus, Long>)
				AssetEntryUserStatus::setAssetEntryUserStatusId);
		attributeGetterFunctions.put(
			"groupId", AssetEntryUserStatus::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<AssetEntryUserStatus, Long>)
				AssetEntryUserStatus::setGroupId);
		attributeGetterFunctions.put(
			"companyId", AssetEntryUserStatus::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<AssetEntryUserStatus, Long>)
				AssetEntryUserStatus::setCompanyId);
		attributeGetterFunctions.put("userId", AssetEntryUserStatus::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<AssetEntryUserStatus, Long>)
				AssetEntryUserStatus::setUserId);
		attributeGetterFunctions.put(
			"userName", AssetEntryUserStatus::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<AssetEntryUserStatus, String>)
				AssetEntryUserStatus::setUserName);
		attributeGetterFunctions.put(
			"createDate", AssetEntryUserStatus::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<AssetEntryUserStatus, Date>)
				AssetEntryUserStatus::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", AssetEntryUserStatus::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<AssetEntryUserStatus, Date>)
				AssetEntryUserStatus::setModifiedDate);
		attributeGetterFunctions.put(
			"entryId", AssetEntryUserStatus::getEntryId);
		attributeSetterBiConsumers.put(
			"entryId",
			(BiConsumer<AssetEntryUserStatus, Long>)
				AssetEntryUserStatus::setEntryId);
		attributeGetterFunctions.put(
			"acknowledged", AssetEntryUserStatus::getAcknowledged);
		attributeSetterBiConsumers.put(
			"acknowledged",
			(BiConsumer<AssetEntryUserStatus, Boolean>)
				AssetEntryUserStatus::setAcknowledged);
		attributeGetterFunctions.put(
			"acknowledgementDate",
			AssetEntryUserStatus::getAcknowledgementDate);
		attributeSetterBiConsumers.put(
			"acknowledgementDate",
			(BiConsumer<AssetEntryUserStatus, Date>)
				AssetEntryUserStatus::setAcknowledgementDate);
		attributeGetterFunctions.put(
			"downloaded", AssetEntryUserStatus::getDownloaded);
		attributeSetterBiConsumers.put(
			"downloaded",
			(BiConsumer<AssetEntryUserStatus, Boolean>)
				AssetEntryUserStatus::setDownloaded);
		attributeGetterFunctions.put(
			"downloadDate", AssetEntryUserStatus::getDownloadDate);
		attributeSetterBiConsumers.put(
			"downloadDate",
			(BiConsumer<AssetEntryUserStatus, Date>)
				AssetEntryUserStatus::setDownloadDate);
		attributeGetterFunctions.put("read", AssetEntryUserStatus::getRead);
		attributeSetterBiConsumers.put(
			"read",
			(BiConsumer<AssetEntryUserStatus, Boolean>)
				AssetEntryUserStatus::setRead);
		attributeGetterFunctions.put(
			"readDate", AssetEntryUserStatus::getReadDate);
		attributeSetterBiConsumers.put(
			"readDate",
			(BiConsumer<AssetEntryUserStatus, Date>)
				AssetEntryUserStatus::setReadDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getAssetEntryUserStatusId() {
		return _assetEntryUserStatusId;
	}

	@Override
	public void setAssetEntryUserStatusId(long assetEntryUserStatusId) {
		_assetEntryUserStatusId = assetEntryUserStatusId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_columnBitmask = -1L;

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getEntryId() {
		return _entryId;
	}

	@Override
	public void setEntryId(long entryId) {
		_columnBitmask |= ENTRYID_COLUMN_BITMASK;

		if (!_setOriginalEntryId) {
			_setOriginalEntryId = true;

			_originalEntryId = _entryId;
		}

		_entryId = entryId;
	}

	public long getOriginalEntryId() {
		return _originalEntryId;
	}

	@JSON
	@Override
	public boolean getAcknowledged() {
		return _acknowledged;
	}

	@JSON
	@Override
	public boolean isAcknowledged() {
		return _acknowledged;
	}

	@Override
	public void setAcknowledged(boolean acknowledged) {
		_acknowledged = acknowledged;
	}

	@JSON
	@Override
	public Date getAcknowledgementDate() {
		return _acknowledgementDate;
	}

	@Override
	public void setAcknowledgementDate(Date acknowledgementDate) {
		_acknowledgementDate = acknowledgementDate;
	}

	@JSON
	@Override
	public boolean getDownloaded() {
		return _downloaded;
	}

	@JSON
	@Override
	public boolean isDownloaded() {
		return _downloaded;
	}

	@Override
	public void setDownloaded(boolean downloaded) {
		_downloaded = downloaded;
	}

	@JSON
	@Override
	public Date getDownloadDate() {
		return _downloadDate;
	}

	@Override
	public void setDownloadDate(Date downloadDate) {
		_downloadDate = downloadDate;
	}

	@JSON
	@Override
	public boolean getRead() {
		return _read;
	}

	@JSON
	@Override
	public boolean isRead() {
		return _read;
	}

	@Override
	public void setRead(boolean read) {
		_read = read;
	}

	@JSON
	@Override
	public Date getReadDate() {
		return _readDate;
	}

	@Override
	public void setReadDate(Date readDate) {
		_readDate = readDate;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(AssetEntryUserStatus.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public AssetEntryUserStatus toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, AssetEntryUserStatus>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AssetEntryUserStatusImpl assetEntryUserStatusImpl =
			new AssetEntryUserStatusImpl();

		assetEntryUserStatusImpl.setUuid(getUuid());
		assetEntryUserStatusImpl.setAssetEntryUserStatusId(
			getAssetEntryUserStatusId());
		assetEntryUserStatusImpl.setGroupId(getGroupId());
		assetEntryUserStatusImpl.setCompanyId(getCompanyId());
		assetEntryUserStatusImpl.setUserId(getUserId());
		assetEntryUserStatusImpl.setUserName(getUserName());
		assetEntryUserStatusImpl.setCreateDate(getCreateDate());
		assetEntryUserStatusImpl.setModifiedDate(getModifiedDate());
		assetEntryUserStatusImpl.setEntryId(getEntryId());
		assetEntryUserStatusImpl.setAcknowledged(isAcknowledged());
		assetEntryUserStatusImpl.setAcknowledgementDate(
			getAcknowledgementDate());
		assetEntryUserStatusImpl.setDownloaded(isDownloaded());
		assetEntryUserStatusImpl.setDownloadDate(getDownloadDate());
		assetEntryUserStatusImpl.setRead(isRead());
		assetEntryUserStatusImpl.setReadDate(getReadDate());

		assetEntryUserStatusImpl.resetOriginalValues();

		return assetEntryUserStatusImpl;
	}

	@Override
	public int compareTo(AssetEntryUserStatus assetEntryUserStatus) {
		int value = 0;

		value = getUserName().compareTo(assetEntryUserStatus.getUserName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof AssetEntryUserStatus)) {
			return false;
		}

		AssetEntryUserStatus assetEntryUserStatus =
			(AssetEntryUserStatus)object;

		AssetEntryUserStatusPK primaryKey =
			assetEntryUserStatus.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		AssetEntryUserStatusModelImpl assetEntryUserStatusModelImpl = this;

		assetEntryUserStatusModelImpl._originalUuid =
			assetEntryUserStatusModelImpl._uuid;

		assetEntryUserStatusModelImpl._originalGroupId =
			assetEntryUserStatusModelImpl._groupId;

		assetEntryUserStatusModelImpl._setOriginalGroupId = false;

		assetEntryUserStatusModelImpl._originalCompanyId =
			assetEntryUserStatusModelImpl._companyId;

		assetEntryUserStatusModelImpl._setOriginalCompanyId = false;

		assetEntryUserStatusModelImpl._originalUserId =
			assetEntryUserStatusModelImpl._userId;

		assetEntryUserStatusModelImpl._setOriginalUserId = false;

		assetEntryUserStatusModelImpl._setModifiedDate = false;

		assetEntryUserStatusModelImpl._originalEntryId =
			assetEntryUserStatusModelImpl._entryId;

		assetEntryUserStatusModelImpl._setOriginalEntryId = false;

		assetEntryUserStatusModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<AssetEntryUserStatus> toCacheModel() {
		AssetEntryUserStatusCacheModel assetEntryUserStatusCacheModel =
			new AssetEntryUserStatusCacheModel();

		assetEntryUserStatusCacheModel.assetEntryUserStatusPK = getPrimaryKey();

		assetEntryUserStatusCacheModel.uuid = getUuid();

		String uuid = assetEntryUserStatusCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			assetEntryUserStatusCacheModel.uuid = null;
		}

		assetEntryUserStatusCacheModel.assetEntryUserStatusId =
			getAssetEntryUserStatusId();

		assetEntryUserStatusCacheModel.groupId = getGroupId();

		assetEntryUserStatusCacheModel.companyId = getCompanyId();

		assetEntryUserStatusCacheModel.userId = getUserId();

		assetEntryUserStatusCacheModel.userName = getUserName();

		String userName = assetEntryUserStatusCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			assetEntryUserStatusCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			assetEntryUserStatusCacheModel.createDate = createDate.getTime();
		}
		else {
			assetEntryUserStatusCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			assetEntryUserStatusCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			assetEntryUserStatusCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		assetEntryUserStatusCacheModel.entryId = getEntryId();

		assetEntryUserStatusCacheModel.acknowledged = isAcknowledged();

		Date acknowledgementDate = getAcknowledgementDate();

		if (acknowledgementDate != null) {
			assetEntryUserStatusCacheModel.acknowledgementDate =
				acknowledgementDate.getTime();
		}
		else {
			assetEntryUserStatusCacheModel.acknowledgementDate = Long.MIN_VALUE;
		}

		assetEntryUserStatusCacheModel.downloaded = isDownloaded();

		Date downloadDate = getDownloadDate();

		if (downloadDate != null) {
			assetEntryUserStatusCacheModel.downloadDate =
				downloadDate.getTime();
		}
		else {
			assetEntryUserStatusCacheModel.downloadDate = Long.MIN_VALUE;
		}

		assetEntryUserStatusCacheModel.read = isRead();

		Date readDate = getReadDate();

		if (readDate != null) {
			assetEntryUserStatusCacheModel.readDate = readDate.getTime();
		}
		else {
			assetEntryUserStatusCacheModel.readDate = Long.MIN_VALUE;
		}

		return assetEntryUserStatusCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<AssetEntryUserStatus, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<AssetEntryUserStatus, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AssetEntryUserStatus, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(
				attributeGetterFunction.apply((AssetEntryUserStatus)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<AssetEntryUserStatus, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<AssetEntryUserStatus, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AssetEntryUserStatus, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(
				attributeGetterFunction.apply((AssetEntryUserStatus)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, AssetEntryUserStatus>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _uuid;
	private String _originalUuid;
	private long _assetEntryUserStatusId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _entryId;
	private long _originalEntryId;
	private boolean _setOriginalEntryId;
	private boolean _acknowledged;
	private Date _acknowledgementDate;
	private boolean _downloaded;
	private Date _downloadDate;
	private boolean _read;
	private Date _readDate;
	private long _columnBitmask;
	private AssetEntryUserStatus _escapedModel;

}